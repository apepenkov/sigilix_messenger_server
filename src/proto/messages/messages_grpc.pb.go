// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: messages.proto

package messages

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_InitChatFromInitializer_FullMethodName          = "/messages.MessageService/InitChatFromInitializer"
	MessageService_InitChatFromReceiver_FullMethodName             = "/messages.MessageService/InitChatFromReceiver"
	MessageService_UpdateChatRsaKey_FullMethodName                 = "/messages.MessageService/UpdateChatRsaKey"
	MessageService_SendMessage_FullMethodName                      = "/messages.MessageService/SendMessage"
	MessageService_SendFile_FullMethodName                         = "/messages.MessageService/SendFile"
	MessageService_SubscribeToIncomingNotifications_FullMethodName = "/messages.MessageService/SubscribeToIncomingNotifications"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	InitChatFromInitializer(ctx context.Context, in *InitChatFromInitializerRequest, opts ...grpc.CallOption) (*InitChatFromInitializerResponse, error)
	InitChatFromReceiver(ctx context.Context, in *InitChatFromReceiverRequest, opts ...grpc.CallOption) (*InitChatFromReceiverResponse, error)
	UpdateChatRsaKey(ctx context.Context, in *UpdateChatRsaKeyRequest, opts ...grpc.CallOption) (*UpdateChatRsaKeyResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
	SendFile(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (*SendFileResponse, error)
	SubscribeToIncomingNotifications(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (MessageService_SubscribeToIncomingNotificationsClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) InitChatFromInitializer(ctx context.Context, in *InitChatFromInitializerRequest, opts ...grpc.CallOption) (*InitChatFromInitializerResponse, error) {
	out := new(InitChatFromInitializerResponse)
	err := c.cc.Invoke(ctx, MessageService_InitChatFromInitializer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) InitChatFromReceiver(ctx context.Context, in *InitChatFromReceiverRequest, opts ...grpc.CallOption) (*InitChatFromReceiverResponse, error) {
	out := new(InitChatFromReceiverResponse)
	err := c.cc.Invoke(ctx, MessageService_InitChatFromReceiver_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) UpdateChatRsaKey(ctx context.Context, in *UpdateChatRsaKeyRequest, opts ...grpc.CallOption) (*UpdateChatRsaKeyResponse, error) {
	out := new(UpdateChatRsaKeyResponse)
	err := c.cc.Invoke(ctx, MessageService_UpdateChatRsaKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, MessageService_SendMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SendFile(ctx context.Context, in *SendFileRequest, opts ...grpc.CallOption) (*SendFileResponse, error) {
	out := new(SendFileResponse)
	err := c.cc.Invoke(ctx, MessageService_SendFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SubscribeToIncomingNotifications(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (MessageService_SubscribeToIncomingNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_SubscribeToIncomingNotifications_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSubscribeToIncomingNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SubscribeToIncomingNotificationsClient interface {
	Recv() (*IncomingNotification, error)
	grpc.ClientStream
}

type messageServiceSubscribeToIncomingNotificationsClient struct {
	grpc.ClientStream
}

func (x *messageServiceSubscribeToIncomingNotificationsClient) Recv() (*IncomingNotification, error) {
	m := new(IncomingNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	InitChatFromInitializer(context.Context, *InitChatFromInitializerRequest) (*InitChatFromInitializerResponse, error)
	InitChatFromReceiver(context.Context, *InitChatFromReceiverRequest) (*InitChatFromReceiverResponse, error)
	UpdateChatRsaKey(context.Context, *UpdateChatRsaKeyRequest) (*UpdateChatRsaKeyResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	SendFile(context.Context, *SendFileRequest) (*SendFileResponse, error)
	SubscribeToIncomingNotifications(*SubscriptionRequest, MessageService_SubscribeToIncomingNotificationsServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) InitChatFromInitializer(context.Context, *InitChatFromInitializerRequest) (*InitChatFromInitializerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitChatFromInitializer not implemented")
}
func (UnimplementedMessageServiceServer) InitChatFromReceiver(context.Context, *InitChatFromReceiverRequest) (*InitChatFromReceiverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitChatFromReceiver not implemented")
}
func (UnimplementedMessageServiceServer) UpdateChatRsaKey(context.Context, *UpdateChatRsaKeyRequest) (*UpdateChatRsaKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChatRsaKey not implemented")
}
func (UnimplementedMessageServiceServer) SendMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) SendFile(context.Context, *SendFileRequest) (*SendFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedMessageServiceServer) SubscribeToIncomingNotifications(*SubscriptionRequest, MessageService_SubscribeToIncomingNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToIncomingNotifications not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_InitChatFromInitializer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitChatFromInitializerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).InitChatFromInitializer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_InitChatFromInitializer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).InitChatFromInitializer(ctx, req.(*InitChatFromInitializerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_InitChatFromReceiver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitChatFromReceiverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).InitChatFromReceiver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_InitChatFromReceiver_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).InitChatFromReceiver(ctx, req.(*InitChatFromReceiverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_UpdateChatRsaKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChatRsaKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).UpdateChatRsaKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_UpdateChatRsaKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).UpdateChatRsaKey(ctx, req.(*UpdateChatRsaKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MessageService_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SendFile(ctx, req.(*SendFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SubscribeToIncomingNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SubscribeToIncomingNotifications(m, &messageServiceSubscribeToIncomingNotificationsServer{stream})
}

type MessageService_SubscribeToIncomingNotificationsServer interface {
	Send(*IncomingNotification) error
	grpc.ServerStream
}

type messageServiceSubscribeToIncomingNotificationsServer struct {
	grpc.ServerStream
}

func (x *messageServiceSubscribeToIncomingNotificationsServer) Send(m *IncomingNotification) error {
	return x.ServerStream.SendMsg(m)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messages.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitChatFromInitializer",
			Handler:    _MessageService_InitChatFromInitializer_Handler,
		},
		{
			MethodName: "InitChatFromReceiver",
			Handler:    _MessageService_InitChatFromReceiver_Handler,
		},
		{
			MethodName: "UpdateChatRsaKey",
			Handler:    _MessageService_UpdateChatRsaKey_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _MessageService_SendMessage_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _MessageService_SendFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToIncomingNotifications",
			Handler:       _MessageService_SubscribeToIncomingNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messages.proto",
}
